// <auto-generated />
using System;
using AutoAnalytics.WebPortal.Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AutoAnalytics.WebPortal.Domain.Migrations
{
    [DbContext(typeof(AutoAnalyticsPostgresDBContext))]
    partial class AutoAnalyticsPostgresDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("plr")
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("t_group_id_sequence", "auto_analytics")
                .HasMin(0L)
                .HasMax(99999999999999999L);

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.Authentication.TUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CRegistration")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("TUSER", "authentication");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.Authentication.TUser_auth_info", b =>
                {
                    b.Property<long>("TUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CPass_hash")
                        .HasColumnType("text");

                    b.HasKey("TUserId");

                    b.ToTable("TUSER_AUTH_INFO", "authentication");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.Authentication.TUser_personality", b =>
                {
                    b.Property<long>("TUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CName")
                        .HasColumnType("text");

                    b.Property<string>("CPatronimyc")
                        .HasColumnType("text");

                    b.Property<string>("CPosition")
                        .HasColumnType("text");

                    b.Property<string>("CSurname")
                        .HasColumnType("text");

                    b.HasKey("TUserId");

                    b.ToTable("TUSER_PERSONALITY", "authentication");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TAssocRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CCalcDate")
                        .HasColumnType("date")
                        .HasColumnName("c_calc_date");

                    b.Property<decimal>("CLift")
                        .HasColumnType("numeric")
                        .HasColumnName("c_lift");

                    b.Property<decimal>("CReliability")
                        .HasColumnType("numeric")
                        .HasColumnName("c_reliability");

                    b.Property<long>("CSupportCount")
                        .HasColumnType("bigint")
                        .HasColumnName("c_support_count");

                    b.Property<decimal>("CSupportPerc")
                        .HasColumnType("numeric")
                        .HasColumnName("c_support_perc");

                    b.Property<long>("ConseqDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("conseq_detail_id");

                    b.Property<long>("ModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("model_id");

                    b.Property<long>("ReasonDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("reason_detail_id");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint")
                        .HasColumnName("region_id");

                    b.HasKey("Id");

                    b.HasIndex("ConseqDetailId");

                    b.HasIndex("ReasonDetailId");

                    b.ToTable("t_assoc_rule", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TCrash", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime?>("CDate")
                        .HasColumnType("date")
                        .HasColumnName("c_date");

                    b.Property<string>("CDescription")
                        .HasColumnType("text")
                        .HasColumnName("c_description");

                    b.Property<string>("CrashId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crash_id")
                        .HasComment("ComplaintId + \" - \" + EngineNum");

                    b.Property<long>("DamageDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("damage_detail_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DamageDetailId" }, "IX_t_crash_damage_detail_id");

                    b.ToTable("t_crash", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.Property<long>("SubgroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("subgroup_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubgroupId" }, "IX_t_detail_subgroup_id");

                    b.ToTable("t_detail", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("t_group", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("t_model", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TRegion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("t_region", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TSubgroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "IX_t_subgroup_group_id");

                    b.ToTable("t_subgroup", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.Authentication.TUser_auth_info", b =>
                {
                    b.HasOne("AutoAnalytics.WebPortal.Domain.Authentication.TUser", "TUser")
                        .WithOne("TUser_Auth_Info")
                        .HasForeignKey("AutoAnalytics.WebPortal.Domain.Authentication.TUser_auth_info", "TUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TUser");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.Authentication.TUser_personality", b =>
                {
                    b.HasOne("AutoAnalytics.WebPortal.Domain.Authentication.TUser", "TUser")
                        .WithOne("TUser_personality")
                        .HasForeignKey("AutoAnalytics.WebPortal.Domain.Authentication.TUser_personality", "TUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TUser");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TAssocRule", b =>
                {
                    b.HasOne("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TDetail", "ConseqDetail")
                        .WithMany("TAssocRuleConseqDetails")
                        .HasForeignKey("ConseqDetailId")
                        .HasConstraintName("t_assoc_rule_conseq_detail_id_fkey")
                        .IsRequired();

                    b.HasOne("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TDetail", "ReasonDetail")
                        .WithMany("TAssocRuleReasonDetails")
                        .HasForeignKey("ReasonDetailId")
                        .HasConstraintName("t_assoc_rule_reason_detail_id_fkey")
                        .IsRequired();

                    b.Navigation("ConseqDetail");

                    b.Navigation("ReasonDetail");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TCrash", b =>
                {
                    b.HasOne("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TDetail", "DamageDetail")
                        .WithMany("TCrashes")
                        .HasForeignKey("DamageDetailId")
                        .HasConstraintName("detail_dependency")
                        .IsRequired();

                    b.Navigation("DamageDetail");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TDetail", b =>
                {
                    b.HasOne("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TSubgroup", "Subgroup")
                        .WithMany("TDetails")
                        .HasForeignKey("SubgroupId")
                        .HasConstraintName("subgroup_for_detail")
                        .IsRequired();

                    b.Navigation("Subgroup");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TSubgroup", b =>
                {
                    b.HasOne("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TGroup", "Group")
                        .WithMany("TSubgroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("group_for_subgroup")
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.Authentication.TUser", b =>
                {
                    b.Navigation("TUser_Auth_Info");

                    b.Navigation("TUser_personality");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TDetail", b =>
                {
                    b.Navigation("TAssocRuleConseqDetails");

                    b.Navigation("TAssocRuleReasonDetails");

                    b.Navigation("TCrashes");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TGroup", b =>
                {
                    b.Navigation("TSubgroups");
                });

            modelBuilder.Entity("AutoAnalytics.WebPortal.Domain.DetailAnalysis.TSubgroup", b =>
                {
                    b.Navigation("TDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
